import asyncio
import logging
import json
import threading
from datetime import datetime, date
from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from dateutil import parser
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
import uvicorn
from asgiref.wsgi import WsgiToAsgi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/Users/samandarlev/Desktop/tapgo_request-site/app.log'),
        logging.StreamHandler()
    ]
)
logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///bookings.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_BOT_TOKEN = '7630314423:AAH8prs6e7cXSd6a68YT7kGIhCc_r5_FXYQ'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
telegram_chat_ids = set()
message_queue = asyncio.Queue()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª
main_loop = asyncio.get_event_loop()

# –ú–æ–¥–µ–ª—å Booking
class Booking(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    booking_type = db.Column(db.String(50), nullable=False)
    entertainment_center = db.Column(db.String(200), nullable=False)
    date_time = db.Column(db.DateTime, nullable=False)
    children_count = db.Column(db.Integer, nullable=False)
    children_cost = db.Column(db.Integer, nullable=False)
    food_included = db.Column(db.Boolean, nullable=False)
    food_items = db.Column(db.Text, nullable=True)
    services_included = db.Column(db.Boolean, nullable=False)
    services_items = db.Column(db.Text, nullable=True)
    transport_included = db.Column(db.Boolean, nullable=False)
    transport_type = db.Column(db.String(100), nullable=True)
    transport_cost = db.Column(db.Integer, nullable=True)
    total = db.Column(db.Integer, nullable=False)
    status = db.Column(db.String(20), nullable=False, default='active')
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    with app.app_context():
        db.create_all()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö bookings.db —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_message_queue():
    while True:
        booking = await message_queue.get()
        try:
            await send_telegram_message(booking)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{booking.id}: {str(e)}")
        message_queue.task_done()

# Aiogram: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    chat_id = message.chat.id
    telegram_chat_ids.add(chat_id)
    await message.answer('–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.')
    logging.info(f'–î–æ–±–∞–≤–ª–µ–Ω chat_id: {chat_id}, —Ç–µ–∫—É—â–∏–µ chat_ids: {telegram_chat_ids}')

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã
async def send_telegram_message(booking):
    if not telegram_chat_ids:
        logging.warning("–ù–µ—Ç chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    try:
        food_items = json.loads(booking.food_items) if booking.food_items else []
        services_items = json.loads(booking.services_items) if booking.services_items else []
        
        message = (
            f"üìÖ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (# {booking.id})*\n\n"
            f"üìå *–¢–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*: {booking.booking_type}\n"
            f"üè¨ *–¶–µ–Ω—Ç—Ä*: {booking.entertainment_center}\n"
            f"üïí *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: {booking.date_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë∂ *–î–µ—Ç–∏*: {booking.children_count} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {booking.children_cost} —Ç–≥)\n"
            f"üçï *–ü–∏—Ç–∞–Ω–∏–µ*: {'–í–∫–ª—é—á–µ–Ω–æ' if booking.food_included else '–ù–µ –≤–∫–ª—é—á–µ–Ω–æ'}\n"
        )
        if food_items:
            message += "  - " + "\n  - ".join([f"{item['name']} ({item['price']} —Ç–≥ x {item['quantity']})" for item in food_items]) + "\n"
        
        message += f"üé≠ *–£—Å–ª—É–≥–∏*: {'–í–∫–ª—é—á–µ–Ω–æ' if booking.services_included else '–ù–µ –≤–∫–ª—é—á–µ–Ω–æ'}\n"
        if services_items:
            message += "  - " + "\n  - ".join([f"{item['name']} ({item['price']} —Ç–≥)" for item in services_items]) + "\n"
        
        message += f"üöó *–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç*: {'–í–∫–ª—é—á–µ–Ω–æ' if booking.transport_included else '–ù–µ –≤–∫–ª—é—á–µ–Ω–æ'}\n"
        if booking.transport_included and booking.transport_type:
            message += f"  - {booking.transport_type} ({booking.transport_cost} —Ç–≥)\n"
        
        message += (
            f"üí∏ *–ò—Ç–æ–≥–æ*: {booking.total} —Ç–≥\n"
            f"üìà *–°—Ç–∞—Ç—É—Å*: {booking.status}\n"
        )
        
        for chat_id in telegram_chat_ids:
            try:
                await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ chat_id: {chat_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{booking.id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat_id {chat_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{booking.id}: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{booking.id}: {str(e)}")


# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def home():
    logging.info("–ó–∞–ø—Ä–æ—à–µ–Ω –º–∞—Ä—à—Ä—É—Ç /")
    return render_template('index.html')

@app.route('/about')
def about():
    logging.info("–ó–∞–ø—Ä–æ—à–µ–Ω –º–∞—Ä—à—Ä—É—Ç /about")
    return render_template('about.html')

@app.route('/api/bookings', methods=['POST'])
def create_booking():
    logging.info("–ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /api/bookings")
    try:
        data = request.get_json()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        if not data:
            logging.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return jsonify({'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

        required_fields = ['booking_type', 'entertainment_center', 'date_time', 'children', 'food', 'services', 'transport', 'total']
        if not all(field in data for field in required_fields):
            logging.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {required_fields}")
            return jsonify({'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'}), 400

        if not data['date_time'] or data['date_time'].strip() == '':
            logging.warning("–ü–æ–ª–µ date_time –ø—É—Å—Ç–æ–µ")
            return jsonify({'message': '–ü–æ–ª–µ –¥–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

        try:
            date_time = parser.parse(data['date_time'], dayfirst=True)
            today = datetime.now().date()
            if date_time.date() <= today:
                logging.warning("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è")
                return jsonify({'message': '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º'}), 400
        except ValueError:
            logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {data['date_time']}")
            return jsonify({'message': f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {data["date_time"]}'}), 400

        if data['children']['count'] <= 0:
            logging.warning("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return jsonify({'message': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}), 400

        if data['total'] <= 0:
            logging.warning("–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return jsonify({'message': '–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}), 400

        booking = Booking(
            booking_type=data['booking_type'],
            entertainment_center=data['entertainment_center'],
            date_time=date_time,
            children_count=data['children']['count'],
            children_cost=data['children']['cost'],
            food_included=data['food']['included'],
            food_items=json.dumps(data['food']['items']),
            services_included=data['services']['included'],
            services_items=json.dumps(data['services']['items']),
            transport_included=data['transport']['included'],
            transport_type=data['transport']['type'],
            transport_cost=data['transport']['cost'],
            total=data['total'],
            status='active'
        )

        db.session.add(booking)
        db.session.commit()
        logging.info(f"–ó–∞—è–≤–∫–∞ #{booking.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        main_loop.call_soon_threadsafe(asyncio.create_task, message_queue.put(booking))

        return jsonify({'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 'id': booking.id}), 201

    except Exception as e:
        db.session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")
        return jsonify({'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/test_booking')
def test_booking():
    logging.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç /test_booking")
    try:
        booking = Booking(
            booking_type='–¢–µ—Å—Ç',
            entertainment_center='Funky Town',
            date_time=datetime(2025, 5, 14, 14, 30),
            children_count=5,
            children_cost=7500,
            food_included=True,
            food_items=json.dumps([{'name': '–ü–∏—Ü—Ü–∞', 'price': 5000, 'quantity': 10}]),
            services_included=True,
            services_items=json.dumps([{'name': '–ê–∫–≤–∞–≥—Ä–∏–º', 'price': 10000}]),
            transport_included=True,
            transport_type='–¢—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ',
            transport_cost=10000,
            total=67500,
            status='active'
        )
        db.session.add(booking)
        db.session.commit()
        logging.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{booking.id} —Å–æ–∑–¥–∞–Ω–∞")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        main_loop.call_soon_threadsafe(asyncio.create_task, message_queue.put(booking))

        return '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞'
    except Exception as e:
        db.session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {str(e)}")
        return f'–û—à–∏–±–∫–∞: {str(e)}'

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
async def main():
    try:
        # –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
        await bot.delete_webhook(drop_pending_updates=True)
        bot_task = asyncio.create_task(dp.start_polling(bot, drop_pending_updates=True))
        queue_task = asyncio.create_task(process_message_queue())
        logging.info("Telegram-–±–æ—Ç –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ Flask —á–µ—Ä–µ–∑ uvicorn —Å –∞–¥–∞–ø—Ç–µ—Ä–æ–º WsgiToAsgi
        asgi_app = WsgiToAsgi(app)
        config = uvicorn.Config(asgi_app, host="127.0.0.1", port=5000, log_level="info")
        server = uvicorn.Server(config)
        await server.serve()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ main: {str(e)}")
        raise

if __name__ == '__main__':
    asyncio.run(main())

